# Maintainer: Martchus <martchus@gmx.net>

# All my PKGBUILDs are managed at https://github.com/Martchus/PKGBUILDs where
# you also find the URL of a binary repository.

# This file is created from PKGBUILD.sh.ep contained by the mentioned repository.
# Do not edit it manually! See README.md in the repository's root directory
# for more information.

# All patches are managed at https://github.com/Martchus/qtbase

pkgname=wasm-qt6-base
_qtver=6.7.2
pkgver=${_qtver/-/}
pkgrel=1
arch=(any)
url='https://www.qt.io'
license=(GPL3 LGPL3 FDL custom)
pkgdesc='A cross-platform application and UI framework (wasm)'
depends=('emscripten')
makedepends=('qt6-base' 'ninja' 'cmake')
optdepends=('qt6-base: development tools')
options=('!strip' '!buildflags' 'staticlibs' '!emptydirs')
groups=(wasm-qt6)
_pkgfqn="qtbase-everywhere-src-${_qtver}"
source=("https://download.qt.io/official_releases/qt/${pkgver%.*}/${_qtver}/submodules/${_pkgfqn}.tar.xz"
        '0001-Use-CMake-s-default-import-library-suffix.patch'
        '0002-Fix-finding-D-Bus.patch'
        '0003-Fix-using-static-PCRE2-and-DBus-1.patch'
        '0004-Fix-transitive-dependencies-of-static-libraries.patch'
        '0005-Fix-libjpeg-workaround-for-conflict-with-rpcndr.h.patch'
        '0006-Support-finding-static-MariaDB-client-library.patch'
        '0007-Allow-overriding-CMAKE_FIND_LIBRARY_SUFFIXES-to-pref.patch'
        '0008-Find-fontconfig-via-pkg-config-for-correct-handling-.patch'
        '0009-Fix-dependency-of-xcb-image-on-xcb-util.patch'
        '0010-Allow-using-properties-of-PkgConfig-targets-for-glib.patch'
        '0011-Allow-using-properties-of-PkgConfig-targets-for-Wayl.patch'
        '0012-Allow-overriding-preference-for-shared-libzstd-libra.patch'
        '0013-Fix-errors-due-to-disabled-exceptions-with-cpp_winrt.patch'
        '0014-Fix-setting-exception-flags-of-plugin-targets.patch'
        '0015-Link-corelib-correctly-against-runtimeobject-when-co.patch'
        '0016-Workaround-linker-error-about-missing-symbol-__sync_.patch'
        '0017-Workaround-Unknown-CMake-command-_qt_test_emscripten.patch'
        '0018-Fix-configuration-when-EMSCRIPTEN_ROOT-is-an-absolut.patch'
        '0019-Fix-polishing-QCommandLinkButton-in-Windows-11-style.patch')
sha256sums=('c5f22a5e10fb162895ded7de0963328e7307611c688487b5d152c9ee64767599'
            'e357b70ca8aefb3b9bcea9a1a84900ad7eda0cb8e7dd01433664fb4833f2aa43'
            '4400a8942d37099d4c3f8df1bed843dac2871b7bfe35f227d3bb53d224fa7cb2'
            'a1f1bba5f6712259ec6e669de59a7d225d1f4f2a4ce3c8ca2008321e13db72a3'
            'e288efeb9bfed9c8d716373a405a050e3958de9b0c488aeffa0527c972211f54'
            'b9359aee1455165b637f174e14c82f1998b554c2d0fca72b9d0fb6c1c17be9b1'
            'e7132e072f477c814769caaee8c7521ab8be79425aa726430e2339d54320150d'
            'fdec0cb9b5bc493d8836b9f9d8cd742948113cb41c4422acdc07e2952e6278f6'
            'f8d6e47eaab508dac173bb39cefa4c9e10b0afd2a6cde0626542cccba8406104'
            '02f2675753de80585a8816c8b803fdfc0ac98b4f0a39b7ee23718b350ff58460'
            '998c408764634e12a6aeeaff8d6ca6f6872f6fadf595f4b5935fc4eb951aa797'
            'cc380824700fabfd081d9c27c38f383daf36051c3e9760c8a48fe415c7697289'
            '971e5916da7e13d84a02212adb069a9349775a130d2f0bfb8ab6ea5a08d7aff0'
            '19508dc42c94e002c32d9658d9980b4fe9f1b6db3f36bf074535071bc50cf4c8'
            '2f0657dcaf281de10a6269c6420f7d06354eca0457abe75c7fcdbcd0804490af'
            'dc236c0c74e598eba4d1c7ad370d3663a100893859217f5ccdf1753d45eb5f01'
            '1a31013dd95256648531b84fa1df243c4b907b1c9d73c251005f83555ebe63cb'
            '48381706210fbabef15a1eb3caa8e09fc931700c38062272849a9ef33c68df6c'
            'd4be080ae1eef1edfe7b0e8a1f7981322030726ea349190aa83f60f78a98d875'
            '41618a3df6710079452fc7ca9daab71b3c5e3519d5bb0e19768570b621ad46fb')

prepare () {
  cd $_pkgfqn

  # apply patches; further descriptions can be found in patch files itself
  for patch in "$srcdir/"*.patch; do
    msg2 "Applying patch $patch"
    patch -p1 -i "$patch"
  done
}

build() {
  export EMSDK=/usr/lib/emscripten
  /usr/lib/emscripten/emcmake cmake -G Ninja -B build -S $_pkgfqn \
      -DCMAKE_FIND_ROOT_PATH:PATH="/usr/lib/emscripten/system" \
      -DCMAKE_INSTALL_PREFIX:PATH="/usr/lib/emscripten/system" \
      -DBUILD_SHARED_LIBS=OFF \
      -DFEATURE_static_runtime=ON \
      -DFEATURE_thread=ON \
      -DQT_INCLUDE_DIRS_NO_SYSTEM=ON \
      -DQT_HOST_PATH=/usr
  VERBOSE=1 cmake --build build
}

package() {
  DESTDIR="$pkgdir" cmake --install build

  install -Dm644 $_pkgfqn/LICENSES/* -t "$pkgdir"/usr/share/licenses/$pkgname

  find "${pkgdir}"/usr/lib/emscripten/system -type f -name 'lib*.so' -exec /usr/lib/emscripten/emstrip -g --strip-unneeded {} \;
  find "${pkgdir}"/usr/lib/emscripten/system -type f -name 'lib*.a' -exec /usr/lib/emscripten/emstrip -g {} \;
  [[ -d "${pkgdir}"/usr/lib/emscripten/system/share/doc ]] && rm -r "${pkgdir}"/usr/lib/emscripten/system/share/doc || true
}
